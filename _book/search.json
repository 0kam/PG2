[
  {
    "objectID": "3.html",
    "href": "3.html",
    "title": "3  QGISとRStudioのインストールと基礎",
    "section": "",
    "text": "3.1 はじめる前に\nこの章から、いよいよ具体的な作業に移っていきます。 始める前に、授業用のデータを格納するフォルダを作っておきましょう。フォルダ名はPG2とします。Physical Geography 2、この授業のタイトルですね。PG2/フォルダを置く場所はどこでも良いですが、親フォルダも含めて全角文字（ひらがな、カタカナ、漢字）が無いことが条件です。Windowsであれば「ドキュメント」、Macであれば「書類」直下などに置くのが良いでしょう（これらのフォルダは日本語で表示されていますが、内部的にはDocumentsという名前のフォルダになっています）。PG2フォルダの下に、この授業の章ごとにフォルダを作っていくことにします。今回第3章なので、PG2/3/という名前のフォルダを作りましょう。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>QGISとRStudioのインストールと基礎</span>"
    ]
  },
  {
    "objectID": "3.html#qgisのインストール",
    "href": "3.html#qgisのインストール",
    "title": "3  QGISとRStudioのインストールと基礎",
    "section": "3.2 QGISのインストール",
    "text": "3.2 QGISのインストール\nQGISは無料で使えるオープンソースの地理情報システム（Geographical Information System, GIS）です。 主要なOS全てに対応していてユーザー数も多く、さまざまなプラグインが公開されており、Web上の解説記事なども豊富にあります。\n\n3.2.1 Windows\nこのインストラクションに従いましょう。書いてあるとおり、ユーザー名に半角ローマ字以外が使われているとエラーを起こします。これはQGIS以外の多くの海外製ソフトウェア（後でインストールするRStudio含む）でも同様です。面倒ですが、新しいアカウントを作ってください。\n\n\n3.2.2 Mac\nこのインストラクションに従いましょう。\n\n\n3.2.3 国土地理院標準地図を読み込む\nこの授業では、さまざまな地理情報を表示するためのツールとしてQGISを使います この際に、背景となる地図があると便利です。背景地図には、インターネット経由でXYZタイル形式のデータを取得するのが一般的です。QGISではOpenStreetMap(OSM)が使えるようになっていますが、日本国内に限って言えば（等高線が描かれた）国土地理院標準地図を使うのが便利です。\nまず、QGISを開き、左側の「ブラウザ」から「XYZタイル」を選び、右クリックし、「新規接続」をクリックします。  新規接続設定画面が出てくるので、\n\n名前に 地理院標準地図\nURLに https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png\n\nを入力し、「OK」を押します。\n 「ブラウザ」の「XYZタイル」に「地理院標準地図」が追加されているので、クリックして地図を表示します。ズームしながらいろいろな場所を見てみましょう！\n ### ベクターデータとラスターデータ 前提として、GISにおけるデータの種類について簡単に紹介します。 GISで用いられるデータは主にベクターデータとラスターデータに分類されます。\n\nベクターデータは、市区町村や建物などをポイント、ライン、ポリゴンで表したものです。 それぞれのポイント、ライン、ポリゴンには市区町村名や建物名などの属性(Attribute)を紐づけます。ベクターデータはシェープファイル（.shp）やGeoJSON（.geojson）、KML（.kml）といったファイル形式で保存されます。 \nラスターデータは一定間隔の格子状にその場所のデータ（標高、土地被覆、色など）が格納されたデータのことを指します。たとえば、航空写真や衛生画像が該当します。この格子の目の大きさをピクセルサイズないしは空間解像度と呼び、これが細かいほど細部まで詳細に表すことができますが、データサイズが大きくなります。ラスターデータはGeoTIFF（.tiff、.tif）形式で保存されることが多いです。 \n\n参考：QGIS LAB 「GISデータについて知ろう！ベクタデータとラスタデータの違いを解説」\n\n\n3.2.4 国土地理院数値標高モデル（DEM）を使えるようにする\n生態学や自然地理学で使う最も基本的な地理情報に、地形データがあります。 地形データは、5mや1m間隔の格子の中に、その場所の標高が格納されたラスタデータ（数値標高モデル、Digital Elevation Model (DEM)）として表現されます。 日本国内においては、国土地理院がDEMを作成・公開しており、誰でも無償で利用できます。一方、国土地理院DEMはGISでは取り扱いづらいデータ形式で配布されているため、QGISのプラグインを使ってGeoTIFF形式に変換します。\nここでは、QuickDEM4JPプラグインを使います。 まず、QGIS上部のメニューバーから「プラグイン」→「プラグインの管理とインストール」をクリックします。  検索窓にQuickDEM4JPと入力し、「QuickDEM4JP」を選択してインストールボタンを押します。  試しに、駿河台キャンパス周辺のDEMをダウンロードして表示してみましょう。 まずは、基盤地図情報ダウンロードサービスのアカウントを作成します。以下のURLからメールアドレスを登録し、本登録まで進んでください。 https://service-login.gsi.go.jp/regist/agreement\nアカウントができたらDEMデータのダウンロードに移りましょう。国土地理院の基盤地図情報ダウンロードサービスを開き、右上の「ログイン」ボタンから、先ほど作成したアカウントにログインします。\n「基本項目・数値標高モデルのダウンロード」から「数値標高モデル」のボタンを押します。 表示された地図をズームして駿河台キャンパスを含むメッシュをクリックします。画面下の「検索結果リスト」タブにデータが追加されるので「ダウンロードリストに全て追加」を押します。「ダウンロードリスト」タブを開き、「ダウンロード等」に進みます。 \n追加したDEMデータを選択し、「ダウンロード」ボタンを押します。登録したメールアドレスにダウンロードリンクが送られてきます。\n FG-GML-533946-DEM5A-20250620.zipというファイルがダウンロードされるので、これをPG2/3/以下に移動させます。\n画面をQGISに戻しましょう。上部メニューバーの「Processing」から「Toolbox」をクリックして、プロセシングールボックスを開きます。先ほど追加した「QuickDEM4JP」をクリックします。 \n「DEM」に、先ほどダウンロードしたPG2/3/FG-GML-533946-DEM5A-20250620.zipを、「GeoTIFFの出力先」に適当なファイル名（PG2/3/chiyodaku_dem.tif）を選択し、「実行」を押します。 \n以下のように、標高が格納されたファイルが表示されるはずです！  この図だと白黒でちょっと見辛いので、表示をいじってみましょう。 左下「レイヤ」のchiyodaku_demを右クリックし、「プロパティ」を開きます。 - カラーマップの変更 - 左のタブ一覧から「シンボロジ」タブを開きます。 - 「レンダリングタイプ」を「単バンド擬似カラー」にします。 - 「カラーランプ」を「Viridis」にします。 - 「OK」を押します - 透明度の変更 - 左のタブ一覧から「透明度」タブを開きます。 - 「グローバルな不透明度」を70%にします。 - 「OK」を押します。\n 鮮やかなカラーマップが表示されました！半透明で標準地図も見ることができます。 本郷台地から不忍池に伸びる谷地形が印象的ですね！\n\n3.2.4.1 余裕がある人向けの発展課題\n東京全域のDEMをダウンロードして一つのGeoTIFFファイルにまとめ、QGIS上で表示してみましょう。 ヒント：「QGIS ラスター 結合」で検索",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>QGISとRStudioのインストールと基礎</span>"
    ]
  },
  {
    "objectID": "3.html#rとrstudioのインストール",
    "href": "3.html#rとrstudioのインストール",
    "title": "3  QGISとRStudioのインストールと基礎",
    "section": "3.3 RとRStudioのインストール",
    "text": "3.3 RとRStudioのインストール\nRは主に統計解析を目的として作られたプログラミング言語・実行環境で、フリーで使うことができます。世界中のRユーザーが開発したパッケージが無数に公開されており、地理情報解析向けのパッケージも多数あります。\n地理情報解析にRを使うメリットはいろいろあります。\n\nマウス操作で行うGISソフトと違い、操作をプログラムで記述するため再現性が担保される。\n\n統計解析や機械学習、論文に使える綺麗な図の作成まで一貫して行える.\n解析結果をいちいち表示しないのでGISソフトより計算が速い.\nフリーソフトなので、所属機関が変わっても使える.\n構文が簡単でプログラミングの初歩的な学習に向いている…….\n\nRStudioは（主に）R言語のプログラミング・実行を行うための統合開発環境（IDE、プログラムを書くエディタと実行環境がセットになったもの）です。必須ではありませんが、RStudioを使うとより効率的にRプログラミングができます。\nインストールはこのインストラクションに従いましょう。\n\n3.3.1 Rパッケージのインストール\n最後に、地理情報解析に用いるRパッケージをインストールします。 後の章では他のパッケージも追加しますが、ここではとりあえず以下をインストールします。\n\ntidyverse：データ処理とグラフ作成に使うパッケージ群\nsf：ベクターデータ処理用のパッケージ\nterra：ラスターデータ処理用のパッケージ\ntidyterra：terraを用いたラスター演算を行いやすくするためのパッケージ\nlwgeom: sfの機能を補完するパッケージ\nleaflet: インタラクティブな地図を表示するためのパッケージ\n\n\n\n3.3.2 Windows\nRStudioのConsoleペイン（左下）に\ninstall.packages(c(\"tidyverse\", \"sf\", \"terra\", \"tidyterra\", \"lwgeom\", \"leaflet\"))\nと入力し、エンターを押します。\n\n\n3.3.3 Mac\nMacではいくつか依存するパッケージを事前にインストールする必要があります。 ここでは、homebrewというパッケージマネージャを使ってインストールしましょう。 まず、「ターミナル」アプリを開き、以下を実行します。\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nこれでbrewコマンドが使えるようになりました。 続いて、必要なパッケージをインストールします。 以下をターミナルで実行します。\nbrew install harfbuzz fribidi libpng libtiff\nbrew install pkg-config gdal\n画面をRStudioに切り替え、コンソールペインに以下を貼り付けて実行します。\ninstall.packages(\"sf\", type = \"source\", configure.args = \"--with-proj-lib=$(brew --prefix)/lib/\")\ninstall.packages(c(\"tidyverse\", \"terra\", \"tidyterra\", \"lwgeom\", \"leaflet\"))\nエラーが出たら教えてください！\n\n\n3.3.4 日本語文字化け問題の解決\nこのままだと、グラフを作成した際に日本語が文字化けすることがあります。 Tools → Global Options → General → Graphicsから、Graphic Device → BackendをAGGに設定しましょう。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>QGISとRStudioのインストールと基礎</span>"
    ]
  },
  {
    "objectID": "1.html",
    "href": "1.html",
    "title": "1  生態系観測の意義と地理学との接点",
    "section": "",
    "text": "1.1 生態系は変化している\nこの講義では、主に生態系を定量的に観測する手法について紹介します。具体的な話題に入る前に、そもそもなぜ生態系を観測する必要があるのか、それが地理学とどのように関係しているのか、考えてみましょう。\n現代ほど生態系の変化に注目が集まっている時代はないかもしれません。過度な開発などによる生態系の劣化や生物多様性の損失が、経済活動にとって極めて重要なリスクとなっています。例えば、世界経済フォーラムが2020年に発表した報告書（自然関連リスクの増大）では、世界の総GDPの半分以上が自然資本と生態系サービスに依存しており、喪失の危機にあると指摘されています。\nそのため、企業は自社のサプライチェーンが生態系に与える影響を定量化し、その結果を財務状況として公開するべきだという考え方（TNFD、自然関連財務情報開示タスクフォース）が広がっています。さらに、深刻化する気候変動は既に自然生態系に大きな影響を与えており、その影響の定量的な把握と適応策の立案が急務となっています。\nこのようなマイナスの変化を受けて、生物多様性を回復させようとする動きも出てきました。日本も批准している生物多様性条約の締約国会議（COP15, 2022）では、生物多様性の損失を止め、回復に転じさせる（ネイチャーポジティブ）ための行動をとることが提言され、世界中で生態系を回復させるための取り組みが試行されています。\nネイチャーポジティブ実現に関する重要な概念として、30by30目標とOECM（Other Effective area-based Conservation Measures) があります（角谷 (2022) を参照）。30by30目標は昆明・モントリオール生物多様性枠組の中で設定された目標で、2030年までに陸域・海域の30%で効果的な生物多様性保全を実施しようというものです。しかし現状を見ると、例えば日本国内では、既存の保護地域（国立公園等）は陸域の20.5%、海域の13.3%に過ぎません。これから5年間で国立公園を大幅に拡大するのも難しいでしょう。\n一方で、自然保護を目的として設定されたエリア以外にも、工場敷地内の緑地や市民公園、スキー場の草原や里山など、人が自然を利活用することで自然保護が実現されている場所もあります。こういった場所での生態系保全活動を推進することで、30by30目標達成を目指そうというのが、OECMの考え方です。日本では、こういった「保護区以外で生態系保全を実施している場所」を環境省が「自然共生サイト」として認定する動きも出てきています。\n日本を含むアジアモンスーン地域における生物多様性保全においては、二次的自然の価値が特に高い、ということも日本におけるOECMの重要性を強調しています。植生は時間と共に遷移し、日本の多くの陸域ではブナやミズナラ、シラカシといった安定的な極相林になります。全ての土地が極相林になってしまうと、生物多様性は当然低くなります。したがって、陽樹林や草原、湿地などの多様な生態系が成立するためには、遷移を巻き戻す適度な撹乱（山火事、台風、河川氾濫など）が必要です。\n日本では、頻繁な河川氾濫や山火事によって河畔草原や湿地が形成されてきました。しかし、人間社会の発展とともに、山火事や河川氾濫は次第に人為的にコントロールされるようになりました。では、湿原や草原に生息していた生物たちは消えてしまったのでしょうか。そうではありません。例えば湿原の生物たちは、湿原を改変して造成された水田に残ることができました。また人間は、薪や茅などの資材を得るために伐採や野焼き、草刈りを行うことで、雑木林や草原を維持してきました。意外に思われるかもしれませんが、日本では人間が適度に自然を利用することで、生態系に程よい撹乱が加えられ、結果として生物多様性が維持されてきたのです。\nこのように、現代では生態系の保全・再生に対する需要が増えつつあり、\nを定量的に観測・予測することが必要とされているのです。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>生態系観測の意義と地理学との接点</span>"
    ]
  },
  {
    "objectID": "1.html#生態系は変化している",
    "href": "1.html#生態系は変化している",
    "title": "1  生態系観測の意義と地理学との接点",
    "section": "",
    "text": "昆明・モントリオール生物多様性枠組の構造（環境省HP（https://www.biodic.go.jp/biodiversity/about/treaty/gbf/kmgbf.html）より）\n\n\n\n\n\nネイチャーポジティブの概念（東北大学COI-NEXT 「ネイチャーポジティブ発展社会実現拠点（https://www.naturepositive-hub.jp/vision/）」より）\n\n\n\n\n\n\n\n\n陸域における植生遷移の例：Wikipediaより（https://ja.wikipedia.org/wiki/%E9%81%B7%E7%A7%BB_%28%E7%94%9F%E7%89%A9%E5%AD%A6%29）\n\n\n\n\n\n\n農村の生態系の多様性と生物多様性（農研機構：山本さんのスライドより転載 https://www.sanshiro.ne.jp/activity/09/k01/09-090610-1.pdf）\n\n\n\n\n開発や気候変動が生態系にどのような（マイナスの）変化をもたらしているか\n回復に向けた取り組みがどの程度（プラスの）効果をもたらしているか\n上記の様な生態系の変化によって、人間社会にどういったインパクトがあるか",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>生態系観測の意義と地理学との接点</span>"
    ]
  },
  {
    "objectID": "1.html#変化を駆動する地理学的なプロセス",
    "href": "1.html#変化を駆動する地理学的なプロセス",
    "title": "1  生態系観測の意義と地理学との接点",
    "section": "1.2 変化を駆動する地理学的なプロセス",
    "text": "1.2 変化を駆動する地理学的なプロセス\n生態系の変化や社会に対するインパクトには、さまざまな地理学的なプロセスが関係しています。たとえば、気候変動が生態系に与える影響を理解するためには、その場所の気象や水文に関する知識が不可欠です。さらに、都市開発や茅刈り文化の衰退、耕作放棄地の増加など、人間活動の変化が地域の生態系に対して負の影響を与えることもあります。都市や里山のような人間活動と密接に結びついた生態系を考える際には、社会と生態系を一つのシステム（社会ー生態システム）として考える必要があり、地域の文化やその地理学的な成立要因についての考察が必要です。生態系の変化が地域の経済や文化に対して与える影響の理解についても同様のことが言えるでしょう。この様な社会課題に対するアプローチについては9章で詳しく議論します。\n\n\n\n生態系の変化と地理学の接点: 生態系の変化を定量的に捉えることで、気候や地域社会の変化が、その場所の生態系とその機能にどのような影響を与えているか評価することができる。\n\n\n以下では日本の高山生態系を題材として、もう少し具体的に、生態系の観測と地理学的な考察が必要とされそうな状況について考えてみましょう。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>生態系観測の意義と地理学との接点</span>"
    ]
  },
  {
    "objectID": "1.html#想定ケース1.-高山生態系への気候変動影響の把握と保全",
    "href": "1.html#想定ケース1.-高山生態系への気候変動影響の把握と保全",
    "title": "1  生態系観測の意義と地理学との接点",
    "section": "1.3 想定ケース1. 高山生態系への気候変動影響の把握と保全",
    "text": "1.3 想定ケース1. 高山生態系への気候変動影響の把握と保全\n厳しい環境に適応した特有の種が多く生息する高山帯は、生物多様性の保全上重要である一方、気候変動に対して極めて脆弱であることが知られています（Hock et al. (2019)）。実際に日本の高山生態系では、融雪の早期化や夏季の気温上昇によると考えられる植生の変化が観測されており、たとえば北海道の大雪山では急速に拡大しつつあるササ類が高山植生を駆逐していることが問題視されています（Kudo et al. (2011)）。現在は、気候変動シナリオをもとに、1 kmメッシュで高山植生の分布変化を予測する研究が行われていますが（Amagai, Oguma, and Ishihama (2022)）、今後は積雪や融雪、植物種間の競争や植生変化が土壌に対して与える影響といった、より詳細な地生態学的プロセスに基づく予測が求められます。\n\n\n\n生態系に対する気候変動影響のメカニズム（工藤岳「高山植物と気候変動」より（https://www.ees.hokudai.ac.jp/ees/wp-content/uploads/2022/06/2015text_6.pdf））",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>生態系観測の意義と地理学との接点</span>"
    ]
  },
  {
    "objectID": "1.html#想定ケース2.-生態系の回復に向けた取り組みの設計と評価",
    "href": "1.html#想定ケース2.-生態系の回復に向けた取り組みの設計と評価",
    "title": "1  生態系観測の意義と地理学との接点",
    "section": "1.4 想定ケース2. 生態系の「回復」に向けた取り組みの設計と評価",
    "text": "1.4 想定ケース2. 生態系の「回復」に向けた取り組みの設計と評価\n上記で取り上げた高山帯におけるササの拡大（と高山植生の衰退）には、定期的なササ刈りが効果的であることが知られています（Kudo et al. (2017)）。しかし、ササ刈りは面積あたりの労力が大きい保全活動ですので、効果的な場所を選定する必要があります。ササ刈り適地を選定する方法はいくつか考えられると思いますが、たとえば近年ササが拡大した場所であれば、ササの下層に高山植生が残っている可能性が高く、回復が見込めるかもしれません。また、ササ刈りによる効果を追跡して定量的に測定することも重要です。生態系の定量的な観測データは、この様な保全・回復活動の計画や効果測定の基盤として重要です。さらにもう少し踏み込めば、ササ刈りによる生態系サービス（お花畑の復活による観光価値など）の回復予測を回復活動の計画に活用することもできそうです。たとえば Mameno et al. (2022) では、気候変動による高山植生の変化は登山者一人当たり10,000円程度の経済価値の損失をもたらすことが予測されています。高山帯の景観の中で観光資源としての寄与が大きい場所を特定できれば、生態系サービスの回復に効果的な施作を考えることができるでしょう。\n\n\n\n北海道大雪山で拡大するササ（工藤岳「高山植物と気候変動」より（https://www.ees.hokudai.ac.jp/ees/wp-content/uploads/2022/06/2015text_6.pdf））",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>生態系観測の意義と地理学との接点</span>"
    ]
  },
  {
    "objectID": "1.html#より深く知りたい方へ",
    "href": "1.html#より深く知りたい方へ",
    "title": "1  生態系観測の意義と地理学との接点",
    "section": "1.5 より深く知りたい方へ",
    "text": "1.5 より深く知りたい方へ\n\n国立環境研究所公開シンポジウム2021「自然環境への気候変動影響とその観測」\n“生きもの緑地”から国際目標に貢献しよう！【国立環境研究所：すごいぞ！生物ニュース2024】\n\n\n\n\n\nAmagai, Yukihiro, Hiroyuki Oguma, and Fumiko Ishihama. 2022. “Predicted Scarcity of Suitable Habitat for Alpine Plant Communities in Northern Japan Under Climate Change.” Applied Vegetation Science, October, e12694. https://doi.org/10.1111/AVSC.12694.\n\n\nHock, R, G Rasul, C Adler, B Ca;ceres, S Gruber, Y Hirabayashi, M Jackson, et al. 2019. “High Mountain Areas.” In IPCC Special Report on the Ocean and Cryosphere in a Changing Climate :, 131–202. Uppsala University, Limnology; Cambridge University Press. https://doi.org/10.1017/9781009157964.004.\n\n\nKudo, Gaku, Yukihiro Amagai, Buho Hoshino, and Masami Kaneko. 2011. “Invasion of Dwarf Bamboo into Alpine Snow-Meadows in Northern Japan: Pattern of Expansion and Impact on Species Diversity.” Ecology and Evolution 1 (September): 85–96. https://doi.org/10.1002/ECE3.9.\n\n\nKudo, Gaku, Yuka Kawai, Yukihiro Amagai, and Daniel E. Winkler. 2017. “Degradation and Recovery of an Alpine Plant Community: Experimental Removal of an Encroaching Dwarf Bamboo.” Alpine Botany 127 (April): 75–83. https://doi.org/10.1007/S00035-016-0178-2.\n\n\nMameno, Kota, Takahiro Kubo, Hiroyuki Oguma, Yukihiro Amagai, and Yasushi Shoji. 2022. “Decline in the Alpine Landscape Aesthetic Value in a National Park Under Climate Change.” Climatic Change 170 (February): 1–18. https://doi.org/10.1007/S10584-022-03322-1.\n\n\n角谷. 2022. “生物多様性保全ツールとしてのoecm の可能性と課題.” 環境情報科学 51: 50–55. https://doi.org/10.11492/eis.51.4_50.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>生態系観測の意義と地理学との接点</span>"
    ]
  },
  {
    "objectID": "2.html",
    "href": "2.html",
    "title": "2  生態系リモートセンシングの基礎",
    "section": "",
    "text": "2.1 パッシブセンサとアクティブセンサ\n生態系を観測する手法は古典的な現地調査をはじめとして無数にありますが、この授業では特に「リモートセンシング」と呼ばれる観測手法に着目します。\nリモートセンシング（Remote Sensing、以下「リモセン」）はその名前の通り、対象を遠隔（Remote）から計測する（Sensing）技術の総称です。一般には、人工衛星や航空機、ドローンに搭載されたセンサ（e.g., カメラ）を用いて地球を観測する技術を指しますが、定点カメラなどを用いた地上からの観測や、音声レコーダを用いた音響観測も広い意味でリモセンに含まれます。リモセンの利点には、非接触・非破壊であること、広域を均質かつ効率的に調査でき、空間的なパターンの発見や外挿を行いやすいこと、定期的な観測の実施が行いやすいことがあげられます。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>生態系リモートセンシングの基礎</span>"
    ]
  },
  {
    "objectID": "2.html#パッシブセンサとアクティブセンサ",
    "href": "2.html#パッシブセンサとアクティブセンサ",
    "title": "2  生態系リモートセンシングの基礎",
    "section": "",
    "text": "2.1.1 パッシブセンサ\nまずは、使われるセンサの仕組みからリモセンを分類していきましょう。ここでは人工衛星に搭載されたセンサを用いたリモセンに着目します。\n最もよく使われるのは「パッシブセンサ」です。これは、太陽や地球が自然に放射・反射している電磁波（光や赤外線、マイクロ波など）を 受動的に 観測するものです。\n少し堅苦しく聞こえるかもしれませんが、実は私たちの「目」もパッシブセンサだと言えます。 私たちの視覚は、以下のようなプロセスを経て世界を認識しています。\n\n光源（太陽や照明）から出た光が物体に当たり、反射したものを目がとらえる\n\n目には赤・青・緑（Red Green Blue でRGBと呼びます）の三種類の受容体があり、三色の組み合わせが「色」として認識される\n\n植物の葉が緑に見えるのは、葉が緑の光を強く反射し、赤や青を吸収しているからです。一方で、鳥類や昆虫、霊長類以外の哺乳類は人間とは異なった色覚を持っており、中にはヒトよりも細かく色を分解して見ている生き物もいます。\n\n\n\n様々な生き物が持つ視物質の吸収波長特性の比較。川端裕人『いろいろな人のいろいろな色　色覚多様性をめぐって』（https://gakugei.shueisha.co.jp/mori/serial/iroiro/005.html）より\n\n\nヒトや動物の目のように、特定の波長の電磁波を受動的に観測するセンサをパッシブセンサと呼び、リモセンに使われる多くのセンサが該当します。電磁波はその波長に応じてさまざまな種類に分類されます。たとえば可視光線や紫外線、赤外線などが挙げられます。\n\n\n\nJAXA 『リモートセンシングと放射伝達』（https://earth.jaxa.jp/ja/eo-knowledge/remote-sensing/index.html）より\n\n\n地球を覆っている様々なもの（岩石、植物、水、雲…）はそれぞれ異なる反射特性を持っていますが、これらを判別するために、人工衛星などに搭載されるセンサには光の三原色だけでなく赤外線を観測できるものや、光をより細かい波長解像度で分解して観測することができるものもあります。\n\n\n\n光の波長と波長による観測しやすい観測対象を表すグラフ宙畑（https://sorabatake.jp/364/）より\n\n\n例えば植物の葉に含まれるクロロフィル色素は赤色光を吸収し、近赤外線を反射する特性を持っています。したがって近赤外線を撮影できるセンサーを使い、近赤外光が赤色光に比べてどの程度強く吸収されているかを測定すれば、植生の有無やクロロフィル含有量、さらには光合成量を推定することができます。具体的な解析手法については第5章で触れます。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>生態系リモートセンシングの基礎</span>"
    ]
  },
  {
    "objectID": "2.html#アクティブセンサ",
    "href": "2.html#アクティブセンサ",
    "title": "2  生態系リモートセンシングの基礎",
    "section": "2.2 アクティブセンサ",
    "text": "2.2 アクティブセンサ\nパッシブセンサが太陽や地球が放射する電磁波を受動的に観測するのに対して、自ら能動的（アクティブ）に電磁波を観測対象（地球表面）に照射し、その反射を観測するセンサ（アクティブセンサ）もあります。アクティブセンサで代表的なものには、SAR（Synthetic Aperture Radar, 合成開口レーダー）やLiDAR（Light Detection and Ranging）があります。これらのセンサは、赤外線よりもさらに波長の長い電磁波やレーザー光を地表に照射し、その反射を観測することで地表面の構造を観測します。アクティブセンサを用いる利点には、昼夜を問わず観測可能なこと、環境条件によらず均質な観測が可能なことが挙げられます。\n\n\n\nSAR衛星のイメージ（宙畑「衛星データのキホン〜分かること、種類、頻度、解像度、活用事例〜」（https://sorabatake.jp/279/）より）\n\n\n\n\n\nLiDARの動作イメージ。対象をスキャンするようにレーザー光を照射し、光が反射されて戻ってくるまでの時間によって対象までの距離（＝対象の構造）をマッピングする。Wikipedia（https://ja.wikipedia.org/wiki/LIDAR）より。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>生態系リモートセンシングの基礎</span>"
    ]
  },
  {
    "objectID": "2.html#鳥の眼虫の眼",
    "href": "2.html#鳥の眼虫の眼",
    "title": "2  生態系リモートセンシングの基礎",
    "section": "2.3 鳥の眼、虫の眼",
    "text": "2.3 鳥の眼、虫の眼\n次に、センサを乗せるプラットフォームに種類からリモセンを分類してみましょう。上記のように、「リモセン」というと一般的には人工衛星を用いたリモセンを指すことが多いです。一方で、より細かい空間解像度が必要な場合には、航空機やドローンにカメラを搭載して観測を行うこともあります。しかし航空機やドローンはその都度飛ばす必要があるため、撮影回数がどうしても下がりがちです。\nでは、高解像度かつ高頻度な観測が必要な場合にはどうすれば良いでしょうか。たとえば、植物の日毎の開花数を観測したい場合や、ある場所に訪れる動物の数の時系列変化を観測したい場合などです。思い切ってセンサを地上に固定してしまうのはどうでしょう？広域を観測できるリモセンの利点は弱くなりますが、時間的に連続した観測ができるようになります。\nこの授業では、上空から広域を観測するリモセンを「鳥の眼」リモセン、定点から狭い領域を高頻度に観測するリモセンを「虫の眼」リモセンと名付けます。\n 「虫の眼」的なリモセンとして、近年の生態学分野では、毎日決まった時間に自動的に録音を行う音声レコーダーを用いた観測手法が普及しつつあります。鳥類やカエル類、セミやコオロギといった昆虫など、音を種内でのコミュニケーションに用いる生物は多く存在します（ヒトもそうですね）。環境中に広がる鳴き声を観測することで、こういった動物の行動や生物季節について知ることができるのです。\n例えば、鳥類を対象とした大規模な音響観測ネットワークを用いた研究では、都市化による光害が鳥類の活動期間を延ばしていることが指摘されています（Pease and Gilbert (2025)、下図）。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>生態系リモートセンシングの基礎</span>"
    ]
  },
  {
    "objectID": "2.html#より深く知りたい方へ",
    "href": "2.html#より深く知りたい方へ",
    "title": "2  生態系リモートセンシングの基礎",
    "section": "2.4 より深く知りたい方へ",
    "text": "2.4 より深く知りたい方へ\n以下の資料に加えて、さくらインターネットが運営する「宙畑（そらばたけ）」の入門記事もおすすめです。ライトで読み物的にも面白い解説記事や、最近の宇宙ビジネスに関するインタビューなども豊富に読めます。\n\nJAXA村木さんの解説スライド「今さら聞けない!!文系でもわかるリモートセンシングのキホン」\nJAXA Earth-graphy リモートセンシングと放射伝達\n宙畑 光の波長って何？ なぜ人工衛星は人間の目に見えないものが見えるのか\n宙畑 SAR（合成開口レーダ）のキホン～事例、分かること、センサ、衛星、波長～\n宙畑「衛星搭載ライダーのキホン事例、分かること、仕組み、種類、衛星」\n国立環境研究所　環境技術解説　『リモートセンシング』",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>生態系リモートセンシングの基礎</span>"
    ]
  },
  {
    "objectID": "2.html#次回までの課題",
    "href": "2.html#次回までの課題",
    "title": "2  生態系リモートセンシングの基礎",
    "section": "2.5 次回までの課題",
    "text": "2.5 次回までの課題\n今回は導入的な内容なので、グループワークは実施しません。代わりに、自分が興味のある対象について、リモセンを用いてどのようなことが行われているか（研究でも実務でも構いません）調べて、Oh-meijiの「振り返りコメント」に書き込んでください。\n\n\n\n\nPease, Brent S, and Neil A Gilbert. 2025. “Light Pollution Prolongs Avian Activity.” Science 389 (August): 818–21. https://doi.org/10.1126/science.adv9472.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>生態系リモートセンシングの基礎</span>"
    ]
  },
  {
    "objectID": "4.html",
    "href": "4.html",
    "title": "4  RStudioを用いた地理情報解析の基礎",
    "section": "",
    "text": "4.1 （本当に雑な）Rの基礎\nここでは、二回にわたってRを用いた地理情報解析を実践してゆきます。 まずは、解析用のフォルダを前回作成したPG2/以下にPG2/4/として作成しましょう。\nここでは、本書でよく使うRの基本的な文法やデータ操作について触れます。Rの基礎をしっかりと学ぶ時間はないので、ざっくり本書で取り扱うサンプルコードの意図が汲み取れる状態を目指して、よく使う構文を攫っていきましょう。きちんと基礎から学びたい人には、卒業論文のためのRをお勧めします。\nそれではRStudioを開いて、Consoleと書かれた左下のペインにサンプルコードをコピペしながらRの使い方を学んでいきましょう！",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>RStudioを用いた地理情報解析の基礎</span>"
    ]
  },
  {
    "objectID": "4.html#本当に雑なrの基礎",
    "href": "4.html#本当に雑なrの基礎",
    "title": "4  RStudioを用いた地理情報解析の基礎",
    "section": "",
    "text": "4.1.1 演算\n\n4.1.1.1 簡単な演算\nまずは簡単な四則演算を行ってみましょう。 Rはじめ、多くのプログラミング言語では全角文字は使えません。 実行時に無視される「コメント」以外では使わないようにしましょう。 以下では、プログラムの実行結果を##で表現します。\n\n# 半角シャープ以降は「コメント」です。Rの実行時には無視されます。\n1 + 1 # 足し算\n## [1] 2\n2 - 1 # 引き算\n## [1] 1\n3 * 4 # 掛け算はアスタリスク\n## [1] 12\n8 / 2 # 割り算\n## [1] 4\n\n\n\n4.1.1.2 変数\n次に、「変数」を使ってみます。変数を使うと、計算結果などの任意の値に名前をつけることができます。変数に値を代入する際には、&lt;-を使います。\n\na &lt;- 1 + 2\na\n## [1] 3\nb &lt;- 3 * 4\nb\n## [1] 12\nc &lt;- a + b\nc\n## [1] 15\n\n\n\n4.1.1.3 関数\n-や+以外の、もっと複雑な操作には「関数」を使います。 「関数」は、受け取った値に対して所定の処理を行い返す手続きのことです。 例えばsum()関数では、()の中に受け取った値を足し合わせて返します。\n\nsum(1,2,3,4) # 足し合わせる\n## [1] 10\nmean(1,2,3,4) # 平均\n## [1] 1\n\nmax(1,2,3,4) # 最大値\n## [1] 4\nmin(1,2,3,4) # 最小値\n## [1] 1\n\nrange &lt;- max(1,2,3,4) - min(1,2,3,4) # 値の幅\nrange\n## [1] 3\n\n関数は星の数ほどあるので、使い方を覚えるのは無理です。わからなくなった際には、Consoleに?関数名（例：?sum）と打つと、右下のHelpペインに使い方が表示されます。\n\n\n4.1.1.4 ベクトル\n最後の例では、min()とmax()の両方に、1,2,3,4という同じ値の組み合わせを入れていました。1,2,3,4をまとめて一つの変数に代入できれば便利そうですね。そういった時には、「ベクトル」を使います。ベクトルは同じ種類の値を複数個まとめたもので、c()関数で作ります。\n\na &lt;- c(1,2,3,4)\na\n## [1] 1 2 3 4\nsum(a)\n## [1] 10\nrange &lt;- max(a) - min(a)\nrange\n## [1] 3\n\n\n\n\n4.1.2 型\n上記では数字だけを取り扱ってきましたが、Rは数字以外のデータを扱うこともできます。 プログラミング言語では、データの種類のことを「型」と呼びます。 例えば、数字の1と文字としての”1”は全く別のものとして取り扱われます。 したがって、以下の例では文字である”1”を足し算で用いることができないため、エラーが生じます。\n\n1 + \"1\"\n## Error in 1 + \"1\": 二項演算子の引数が数値ではありません\n\nそれでは、Rで用いられる（主な）型をみていきましょう。\n\n4.1.2.1 数値 (numeric)\n\n1 / 3\n## [1] 0.3333333\n\n\n\n4.1.2.2 文字列 (character)\n\n\"a\"\n## [1] \"a\"\npaste(\"Hello\", \" \", \"R\") # paste()で文字列を結合します。半角スペースも立派な文字です。\n## [1] \"Hello   R\"\n\n\n\n4.1.2.3 論理 (logical)\n\na &lt;- 2 + 3\na == 5 # 「同じか」は ==\n## [1] TRUE\na != 5 # 「違うか」は !=\n## [1] FALSE\na &lt; 4\n## [1] FALSE\na &gt; 2\n## [1] TRUE\n\n\n\n4.1.2.4 欠損値など (NA, Inf)\n\nNA # 欠損値（あるはずの値がないもの、Not Available）\n## [1] NA\n\n1/0 # 無限大はInfになる\n## [1] Inf\n\na &lt;- NA\nis.na(a) # is.na()で欠損値か確認できる\n## [1] TRUE\n\n\n\n\n4.1.3 Rの基本はデータフレーム\nここからは、もう少し実践的な内容に移っていきます。 少し極端な言い方ですが、Rで取り扱うデータはほとんど「データフレーム」です。 データフレームとは、雑に言えばExcelで作られるような表形式のデータのことです。 例を挙げましょう。\n\n# Rにデフォルトで入っているpenguinsデータを使う\nhead(penguins, 10) # 長いので10行目まで表示\n##    species    island bill_len bill_dep flipper_len body_mass    sex year\n## 1   Adelie Torgersen     39.1     18.7         181      3750   male 2007\n## 2   Adelie Torgersen     39.5     17.4         186      3800 female 2007\n## 3   Adelie Torgersen     40.3     18.0         195      3250 female 2007\n## 4   Adelie Torgersen       NA       NA          NA        NA   &lt;NA&gt; 2007\n## 5   Adelie Torgersen     36.7     19.3         193      3450 female 2007\n## 6   Adelie Torgersen     39.3     20.6         190      3650   male 2007\n## 7   Adelie Torgersen     38.9     17.8         181      3625 female 2007\n## 8   Adelie Torgersen     39.2     19.6         195      4675   male 2007\n## 9   Adelie Torgersen     34.1     18.1         193      3475   &lt;NA&gt; 2007\n## 10  Adelie Torgersen     42.0     20.2         190      4250   &lt;NA&gt; 2007\n\npenguinsはRにサンプルデータとして含まれているデータセットで、文字通りペンギンの種類や体重などに関するデータが含まれています。上記のように、データフレームでは縦方向（列）に同じ種類、横方向（行）に同じ観測（この場合は個体）が来るようにデータが配置されます。\nそれでは、このデータで少し遊んでみましょう。\n\n\n4.1.4 mutate()で新しい列を作る\n以降では、tidyverseというパッケージ（群）を使います。tidyverseはデータフレームの処理やビジュアライゼーションを簡単に行うためのパッケージです。 パッケージの読み込みはlibrary()で行います。\nまずは、既存の列の値を使って新しい列を作るmutate()関数を使ってみます。 ここでは、|&gt;という記号で処理を繋いでいますね。これは「パイプ」と呼ばれるもので、その名の通り複数の処理を繋ぐためのものです。\n\nlibrary(tidyverse)\n\ndf &lt;- penguins |&gt;\n  mutate(\n    bill_size = bill_len * bill_dep, # 嘴の長さと高さを掛けて大きさにする\n    bill_aspect = bill_len / bill_dep # 嘴の縦横比\n  ) |&gt;\n  mutate(\n    relative_bill_size = bill_size / body_mass # 体重に比した嘴の大きさ\n  )\n\nhead(df, 10) # 10行目まで表示\n##    species    island bill_len bill_dep flipper_len body_mass    sex year\n## 1   Adelie Torgersen     39.1     18.7         181      3750   male 2007\n## 2   Adelie Torgersen     39.5     17.4         186      3800 female 2007\n## 3   Adelie Torgersen     40.3     18.0         195      3250 female 2007\n## 4   Adelie Torgersen       NA       NA          NA        NA   &lt;NA&gt; 2007\n## 5   Adelie Torgersen     36.7     19.3         193      3450 female 2007\n## 6   Adelie Torgersen     39.3     20.6         190      3650   male 2007\n## 7   Adelie Torgersen     38.9     17.8         181      3625 female 2007\n## 8   Adelie Torgersen     39.2     19.6         195      4675   male 2007\n## 9   Adelie Torgersen     34.1     18.1         193      3475   &lt;NA&gt; 2007\n## 10  Adelie Torgersen     42.0     20.2         190      4250   &lt;NA&gt; 2007\n##    bill_size bill_aspect relative_bill_size\n## 1     731.17    2.090909          0.1949787\n## 2     687.30    2.270115          0.1808684\n## 3     725.40    2.238889          0.2232000\n## 4         NA          NA                 NA\n## 5     708.31    1.901554          0.2053072\n## 6     809.58    1.907767          0.2218027\n## 7     692.42    2.185393          0.1910124\n## 8     768.32    2.000000          0.1643465\n## 9     617.21    1.883978          0.1776144\n## 10    848.40    2.079208          0.1996235\n\n以上では、bill_size、bill_aspect, relatibe_bill_sizeという３つの列を作ってみました。\n\n\n4.1.5 filter()で行を絞り込む\n次に、特定の列の値を使って行を絞り込みます。例えば、メス個体のデータだけ集めてみましょう。 filter()には絞り込みたい条件式（論理型を返す）を書きます。\n\ndf |&gt;\n  filter(sex == \"female\") |&gt;\n  head(10) # はじめの10行を表示\n##    species    island bill_len bill_dep flipper_len body_mass    sex year\n## 1   Adelie Torgersen     39.5     17.4         186      3800 female 2007\n## 2   Adelie Torgersen     40.3     18.0         195      3250 female 2007\n## 3   Adelie Torgersen     36.7     19.3         193      3450 female 2007\n## 4   Adelie Torgersen     38.9     17.8         181      3625 female 2007\n## 5   Adelie Torgersen     41.1     17.6         182      3200 female 2007\n## 6   Adelie Torgersen     36.6     17.8         185      3700 female 2007\n## 7   Adelie Torgersen     38.7     19.0         195      3450 female 2007\n## 8   Adelie Torgersen     34.4     18.4         184      3325 female 2007\n## 9   Adelie    Biscoe     37.8     18.3         174      3400 female 2007\n## 10  Adelie    Biscoe     35.9     19.2         189      3800 female 2007\n##    bill_size bill_aspect relative_bill_size\n## 1     687.30    2.270115          0.1808684\n## 2     725.40    2.238889          0.2232000\n## 3     708.31    1.901554          0.2053072\n## 4     692.42    2.185393          0.1910124\n## 5     723.36    2.335227          0.2260500\n## 6     651.48    2.056180          0.1760757\n## 7     735.30    2.036842          0.2131304\n## 8     632.96    1.869565          0.1903639\n## 9     691.74    2.065574          0.2034529\n## 10    689.28    1.869792          0.1813895\n\n\n\n4.1.6 select()で列を選ぶ\n最後に、欲しい列だけ選ぶselect()を使ってみます。select()ではかなり柔軟に列を選ぶことができます。\n\n# 列名で選択\ndf |&gt;\n  select(species, body_mass, year) |&gt;\n  head(10)\n##    species body_mass year\n## 1   Adelie      3750 2007\n## 2   Adelie      3800 2007\n## 3   Adelie      3250 2007\n## 4   Adelie        NA 2007\n## 5   Adelie      3450 2007\n## 6   Adelie      3650 2007\n## 7   Adelie      3625 2007\n## 8   Adelie      4675 2007\n## 9   Adelie      3475 2007\n## 10  Adelie      4250 2007\n\n# \"bill\" で始まる列を選択\ndf |&gt;\n  select(starts_with(\"bill\")) |&gt;\n  head(10)\n##    bill_len bill_dep bill_size bill_aspect\n## 1      39.1     18.7    731.17    2.090909\n## 2      39.5     17.4    687.30    2.270115\n## 3      40.3     18.0    725.40    2.238889\n## 4        NA       NA        NA          NA\n## 5      36.7     19.3    708.31    1.901554\n## 6      39.3     20.6    809.58    1.907767\n## 7      38.9     17.8    692.42    2.185393\n## 8      39.2     19.6    768.32    2.000000\n## 9      34.1     18.1    617.21    1.883978\n## 10     42.0     20.2    848.40    2.079208\n  \n# \"len\"で終わる列を選択\ndf |&gt;\n  select(ends_with(\"len\")) |&gt;\n  head(10)\n##    bill_len flipper_len\n## 1      39.1         181\n## 2      39.5         186\n## 3      40.3         195\n## 4        NA          NA\n## 5      36.7         193\n## 6      39.3         190\n## 7      38.9         181\n## 8      39.2         195\n## 9      34.1         193\n## 10     42.0         190\n\n\n\n4.1.7 ggplot()で図を作る\nお疲れ様です（書いてる僕も疲れました）。最後のステップ、いよいよデータを図にしてみましょう。図の作成にはggplot()を使います。基本的な使い方としては、\n\nggplot(aes(x = X軸に使う列名, y = Y軸に使う列名, ...)) + # どの列をどの軸に使うか\n  geom_グラフの種類() # グラフの種類を指定（例：geom_box()で箱ひげ図、geom_point()で散布図）\n\nのように書きます。ggplot()以降はパイプではなく+で処理を繋いでいきます（なぜ？僕に分かりません…）。他にも使う色のセットや文字の大きさなど、細かい設定を順次+で足していけるので、論文でそのまま使える綺麗な図を作成することができます。設定できる項目が膨大なのでちょっととっつきづらいですが、ググれば参考になる情報は多いので心配ありません。\n\n# まず簡単な例。bill_lenとbody_massの関係をみてみます\ndf |&gt; # ここはパイプ\n  drop_na() |&gt; # NAを含む行を削除\n  ggplot(aes(x = body_mass, y = bill_len, color = species)) + # aes()でどの列をx軸、y軸、色に割り当てるかを指定\n  geom_point()\n\n\n\n\n\n\n\n# 次に、種ごと、島ごと、性別ごとの体重をプロットしてみる\ndf |&gt;\n  drop_na() |&gt;\n  ggplot(aes(x = island, y = body_mass, fill = sex)) + # 輪郭や点の色はcolour、塗りつぶしの色はfillで指定\n  geom_violin() + # バイオリンプロット。見慣れないかもしれないけど、箱ひげ図の進化形です。\n  facet_wrap(~species) # 種ごとに図を分ける\n\n\n\n\n\n\n\n# 最後に、さっき作った列を使ってみる\ndf |&gt;\n  drop_na() |&gt;\n  ggplot(aes(x = relative_bill_size, y = bill_aspect, colour = sex)) +\n  geom_point() +\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\n\n\n4.1.8 進む前に\nさて、ここまできてプチ絶望している人も多いと想像しますが、次に行く前に Section 4.3 を読んでみてください。 プログラミングで大事なのは、悩まず手を動かす（試す、ググる、ChatGPTに聞く）こと、気楽に取り組むこと、です。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>RStudioを用いた地理情報解析の基礎</span>"
    ]
  },
  {
    "objectID": "4.html#実践-demデータで遊ぶ",
    "href": "4.html#実践-demデータで遊ぶ",
    "title": "4  RStudioを用いた地理情報解析の基礎",
    "section": "4.2 実践： DEMデータで遊ぶ",
    "text": "4.2 実践： DEMデータで遊ぶ\nそれでは地理情報解析に取り組んでみましょう。今回のテーマは、前章で軽く扱った国土地理院の数値標高モデル（DEM）データを用いて実践的な解析を行うことです。\n\n4.2.1 データの準備\nもう少し広い範囲のDEMデータを準備して、Rを駆使しながら遊んでみましょう。 まずは、前回と同様に基盤地図情報ダウンロードサービスからDEMデータをダウンロードします。墨田区から武蔵野市にかけて、東西方向に3つのタイルを選択します。\n\n「ダウンロードリストに全て追加」→「ダウンロード等へ」→「まとめてダウンロード」を選択し、メールで送られてきたリンクからダウンロードします。 今回は、2025xxxxxxxxxxxx-001.zipのようなZIPファイルがダウンロードされているので、これをPG2/4/に移動し、解凍します。\n4\n└── 20250830131401458-001\n    ├── FG-GML-533944-DEM5A-20250620.zip\n    ├── FG-GML-533945-DEM5A-20250620.zip\n    ├── FG-GML-533946-DEM5A-20250620.zip\n    ├── fmdid15-3101.xml\n    └── fmdid25-3101.xml\nこのような形で、.zipファイルが3つあるはずです。 それでは、これをそれぞれQGISでGeoTIFFファイルに変換しましょう。 今回は、GeoTIFFの出力先を[一時ファイル保存]にします。 \n以下のような感じで、3つのDEMファイルが読み込まれました。\n\n次に、これらを一つに結合します。ラスタ→その他→結合を選び、入力レイヤに先ほど作成された3つのレイヤ（GeoTIFFの出力先という名前のはず）を選択し、実行を押します。\n\n結合されたレイヤが作成されるので、これをGeoTIFFファイルとして保存します。 出力レイヤを右クリックし、エクスポート→名前をつけて保存を選びます。ファイル名を編集して、PG2/4/にdem_tokyoという名前で保存しましょう。\n\nファイルエクスプローラを使って、PG2/4/dem_tokyo.tifが存在することを確かめます。\n\n\n4.2.2 まずはRで読み込んでみる\nそれでは、RStudioに画面を切り替えます。 RStudioの左上にある新規作成ボタン（白紙に緑のプラスマーク）を押し、R Scriptを選択します。Ctrl + S（Macの場合はCmd + S）を押すと、保存先のファイル名を聞かれるので、PG2/4/1_read_dem.Rとして保存します。\n次に、Rを実行する場所を指定します。Session → Set Working Directory → To Source File Locationを選んで、RStudioに作業場所がPG2/4/であることを教えます。\n\nそれでは、以下をコピペしてSourceと書かれたボタンを押します。右下のペインにDEMが表示されるはずです。\n\n# 1_read_dem.R\nsetwd(\"~/Documents/PG2/4/\") # 人によって違うかもしれません\nlibrary(terra)\nlibrary(tidyverse)\nlibrary(tidyterra)\ndem &lt;- rast('dem_tokyo.tif')\ndem\n# Rで図を書く際には、ggplotライブラリを使います。\nggplot() + # まずggplotを初期化し、+で要素を足していきます。\n  geom_spatraster(data = dem) # 次にgeom_spatraster()という種類の図を追加します。\n\n\n\n\n\n\n\n## class       : SpatRaster \n## size        : 1500, 6750, 1  (nrow, ncol, nlyr)\n## resolution  : 5.555556e-05, 5.555556e-05  (x, y)\n## extent      : 139.5, 139.875, 35.66667, 35.75  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : dem_tokyo.tif \n## name        : dem_tokyo \n## min value   :     -7.58 \n## max value   :     74.44\n\n\n\n4.2.3 市区ごとの標高をグラフにする\n次に、ベクターデータと組み合わせて解析してみましょう。 満遍なく均一にデータが敷き詰められたラスターデータを、ベクターデータで特定のエリアごとに分割して集計する作業を行います。\nまずは簡単な例として、DEMデータを市区ごとに分割し、市区ごとの標高分布をグラフにしてみます。\ndem_tokyo.tifには武蔵野市、杉並区、中野区、新宿区、文京区、千代田区、台東区、墨田区が（おおむね）含まれているので、これらの市区間で比較しましょう。\n書き始める前に、日本の自治体の地理情報をまとめたRパッケージjpndistrictをインストールします。 Consoleペインに以下を貼り付けて実行します。\ninstall.packages(\"remotes\")\nremotes::install_github(\"uribo/jpndistrict\")\nそれでは、解析用のRスクリプトをPG2/4/2_dem_cities.Rとして作成します。\n\n# 2_dem_cities.R\n\nlibrary(terra)\nlibrary(tidyverse)\nlibrary(tidyterra)\nlibrary(jpndistrict)\n\nsetwd(\"~/Documents/PG2/4/\")\n\ndem &lt;- rast('dem_tokyo.tif')\n\n# 欲しい市区の名称\ncity_names &lt;- c(\"武蔵野市\", \"杉並区\", \"中野区\", \"新宿区\", \n            \"文京区\", \"千代田区\", \"台東区\", \"墨田区\")\n\n# 都道府県のJISコードを確認する\n# 東京は13\njpnprefs |&gt; print(n = 20)\n## # A tibble: 47 × 11\n##    jis_code prefecture capital      region major_island prefecture_en capital_en\n##    &lt;chr&gt;    &lt;fct&gt;      &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;         &lt;chr&gt;     \n##  1 01       北海道     札幌市       北海道 北海道       Hokkaido      Sapporo-s…\n##  2 02       青森県     青森市       東北   本州         Aomori-ken    Aomori-shi\n##  3 03       岩手県     盛岡市       東北   本州         Iwate-ken     Morioka-s…\n##  4 04       宮城県     仙台市       東北   本州         Miyagi-ken    Sendai-shi\n##  5 05       秋田県     秋田市       東北   本州         Akita-ken     Akita-shi \n##  6 06       山形県     山形市       東北   本州         Yamagata-ken  Yamagata-…\n##  7 07       福島県     福島市       東北   本州         Fukushima-ken Fukushima…\n##  8 08       茨城県     水戸市       関東   本州         Ibaraki-ken   Mito-shi  \n##  9 09       栃木県     宇都宮市     関東   本州         Tochigi-ken   Utsunomiy…\n## 10 10       群馬県     前橋市       関東   本州         Gunma-ken     Maebashi-…\n## 11 11       埼玉県     さいたま市   関東   本州         Saitama-ken   Saitama-s…\n## 12 12       千葉県     千葉市       関東   本州         Chiba-ken     Chiba-shi \n## 13 13       東京都     新宿区 （東京23区）… 関東   本州         Tokyo-to      Shinjuku-…\n## 14 14       神奈川県   横浜市       関東   本州         Kanagawa-ken  Yokohama-…\n## 15 15       新潟県     新潟市       中部   本州         Niigata-ken   Niigata-s…\n## 16 16       富山県     富山市       中部   本州         Toyama-ken    Toyama-shi\n## 17 17       石川県     金沢市       中部   本州         Ishikawa-ken  Kanazawa-…\n## 18 18       福井県     福井市       中部   本州         Fukui-ken     Fukui-shi \n## 19 19       山梨県     甲府市       中部   本州         Yamanashi-ken Kofu-shi  \n## 20 20       長野県     長野市       中部   本州         Nagano-ken    Nagano-shi\n## # ℹ 27 more rows\n## # ℹ 4 more variables: region_en &lt;chr&gt;, major_island_en &lt;chr&gt;,\n## #   capital_latitude &lt;dbl&gt;, capital_longitude &lt;dbl&gt;\n\ncities &lt;- jpn_cities(jis_code = 13, admin_name = city_names)\n\n# geometry列に市区のポリゴンデータが入っている\ncities\n## Simple feature collection with 8 features and 2 fields\n## Geometry type: POLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 139.5251 ymin: 35.66571 xmax: 139.8422 ymax: 35.74351\n## Geodetic CRS:  WGS 84\n## # A tibble: 8 × 3\n##   city_code city                                                        geometry\n## * &lt;chr&gt;     &lt;chr&gt;                                                  &lt;POLYGON [°]&gt;\n## 1 13101     千代田区 ((139.7299 35.68555, 139.7333 35.67916, 139.7367 35.67876,…\n## 2 13104     新宿区   ((139.6735 35.71852, 139.679 35.71817, 139.6792 35.71464, …\n## 3 13105     文京区   ((139.7174 35.71455, 139.7232 35.71032, 139.7317 35.70918,…\n## 4 13106     台東区   ((139.7632 35.72184, 139.7685 35.71589, 139.7644 35.7173, …\n## 5 13107     墨田区   ((139.8095 35.68689, 139.812 35.68851, 139.8116 35.69181, …\n## 6 13114     中野区   ((139.6321 35.71686, 139.6417 35.71468, 139.6428 35.71141,…\n## 7 13115     杉並区   ((139.5939 35.68901, 139.5905 35.68701, 139.593 35.68283, …\n## 8 13203     武蔵野市 ((139.5271 35.70982, 139.5324 35.70901, 139.5322 35.70215,…\n\n# DEMデータに合わせるように、市区データをラスタライズする\ncities_raster &lt;- cities |&gt;\n  rasterize(dem, field = \"city\")\n## Warning in y@pntr$rasterize(x@pntr, field, values, background, touches[1], :\n## GDAL Message 1: DeprecationWarning: 'Memory' driver is deprecated since GDAL\n## 3.11. Use 'MEM' onwards. Further messages of this type will be suppressed.\n\n# DEMデータのセルに市区名が入ったデータが出来上がる\nggplot() + \n  geom_spatraster(data = cities_raster)\n\n\n\n\n\n\n\n\n# DEMデータと市区名ラスターを結合し、データフレームに変える\ndem_city &lt;- c(dem, cities_raster) |&gt;\n  as_tibble() |&gt; # データフレームに変換\n  mutate(city = factor(city, levels = city_names)) |&gt; # 表示順をcity_namesの順番にする\n  drop_na()\n\ndem_city \n## # A tibble: 4,069,252 × 2\n##    dem_tokyo city  \n##        &lt;dbl&gt; &lt;fct&gt; \n##  1         0 墨田区\n##  2         0 墨田区\n##  3         0 墨田区\n##  4         0 墨田区\n##  5         0 墨田区\n##  6         0 墨田区\n##  7         0 墨田区\n##  8         0 墨田区\n##  9         0 墨田区\n## 10         0 墨田区\n## # ℹ 4,069,242 more rows\n\n# geom_histgram()でヒストグラムを作成\n# x軸は標高にしたいので、dem_tokyoを指定\n# facet_wrap()でcity別にヒストグラムを作る\n# labs()で軸のラベルを変える\ndem_city |&gt;\n  ggplot() +\n  geom_histogram(mapping = aes(x = dem_tokyo)) +\n  facet_wrap(~city) +\n  labs(x = \"DEMデータの標高（m）\", y = \"頻度\")\n\n\n\n\n\n\n\n\n\n\n4.2.4 地形の断面を見てみる\n次に、地図上に線を引いて地形の断面を見てみましょう。 まずは断面の元になる線をQGISで引きます。\n\n新規シェイプファイルレイヤをクリックし、ジオメトリ型にはラインストリングを指定、PG2/4/line_tokyo.shpとして保存します。\n\n編集モードを切り替え、線の地物を追加を押してから地図上に適当な線を引きます。ダブルクリックすると線の描画を終了できます。最後にレイヤ編集内容を保存を押して保存しましょう。\nこれをRで読み込みます。 新しく、PG2/4/3_cross_section.Rを作成しましょう。\n\n# 3_cross_section.R\n\nlibrary(terra)\nlibrary(tidyverse)\nlibrary(tidyterra)\nlibrary(jpndistrict)\nlibrary(sf)\n\nsetwd(\"~/Documents/PG2/4/\")\n\n# DEMを読み込む\ndem &lt;- rast(\"dem_tokyo.tif\")\n# 線を読み込む\nsection &lt;- st_read(\"line_tokyo.shp\")\n## Reading layer `line_tokyo' from data source \n##   `/Users/okamoto/Documents/PG2/4/line_tokyo.shp' using driver `ESRI Shapefile'\n## Simple feature collection with 1 feature and 1 field\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: 139.5015 ymin: 35.70942 xmax: 139.87 ymax: 35.70942\n## Geodetic CRS:  WGS 84\n\n# 市区のデータをDEMに合わせてラスターにする\ncity_names &lt;- c(\"武蔵野市\", \"杉並区\", \"中野区\", \"新宿区\", \n                \"文京区\", \"千代田区\", \"台東区\", \"墨田区\")\ncities_raster &lt;- jpn_cities(jis_code = 13, admin_name = city_names) |&gt;\n  rasterize(dem, field = \"city\")\n\n# とりあえずプロット\nggplot() +\n  geom_spatraster(data = dem) +\n  geom_sf(data = section, colour = \"white\")\n\n\n\n\n\n\n\n\n# 線に沿って標高と市区名を取得\n# x（経度）,y（緯度）, 値の入ったデータフレームが返ってくる \nelevation &lt;- extractAlong(dem, section, xy = TRUE, ID = FALSE)\ncities &lt;- extractAlong(cities_raster, section, xy = TRUE, ID= FALSE)\n\n# 両者を結合し、横軸を経度、縦軸を標高、色を市区名にした折れ線グラフを描く\nelevation |&gt;\n  mutate(city = factor(cities$city, levels = city_names)) |&gt; # 新しい列としてcityを追加\n  drop_na() |&gt;\n  ggplot(aes(x = x, y = dem_tokyo, colour = city)) +\n  geom_line() +\n  labs(x = \"経度\", y = \"標高\", colour = \"市区名\")\n\n\n\n\n\n\n\n\n\n\n4.2.5 河川の標高と傾斜をグラフにする\n最後に、河川に沿って同様の図を描いてみましょう。折よくこのエリアには神田川が流れているので、神田川に沿って、標高の変化をグラフにします。今回は追加で、DEMから傾斜角も算出してみます。\nまずは、河川のデータを取得します。 国土数値情報ダウンロードサイトから河川データがダウンロードできます。データの選択で東京都を選び、ダウンロードしてください。\nW05_08_13_GML.zipがダウンロードされたと思うので、これをPG2/4/に移動して解凍します。中にはStream.shpと、RiverNode.shpの二つが入っていますが、今回は前者を使います。\nそれではRスクリプトを書いていきましょう。 今回のファイル名はPG2/4/4_stream.Rにします。\n\n# 4_stream.R\nlibrary(terra)\nlibrary(tidyverse)\nlibrary(tidyterra)\nlibrary(jpndistrict)\nlibrary(sf)\n\nsetwd(\"~/Documents/PG2/4/\")\n\ndem &lt;- rast(\"dem_tokyo.tif\")\nstream &lt;- st_read(\"W05-08_13_GML/W05-08_13-g_Stream.shp\")\n## Reading layer `W05-08_13-g_Stream' from data source \n##   `/Users/okamoto/Documents/PG2/4/W05-08_13_GML/W05-08_13-g_Stream.shp' \n##   using driver `ESRI Shapefile'\n## Simple feature collection with 1388 features and 10 fields\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: 138.9525 ymin: 26.63934 xmax: 142.2142 ymax: 35.89437\n## CRS:           NA\nstream\n## Simple feature collection with 1388 features and 10 fields\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: 138.9525 ymin: 26.63934 xmax: 142.2142 ymax: 35.89437\n## CRS:           NA\n## First 10 features:\n##    W05_001    W05_002 W05_003  W05_004 W05_005 W05_006       W05_007\n## 1   830305 8303050000       0   小川谷       3       1 #gb03_1300005\n## 2   830305 8303050000       0   小川谷       3       1 #gb03_1300005\n## 3   830305 8303050000       0   コツ谷       4       1 #gb03_1300004\n## 4   830305 8303050000       0   小川谷       3       1 #gb03_1300005\n## 5   830305 8303050000       0   小川谷       3       1 #gb03_1300005\n## 6   830305 8303050000       0   タキ谷       4       1 #gb03_1300013\n## 7   830305 8303050000       0 名称不明       4       1 #gb03_1300014\n## 8   830305 8303050000       0 名称不明       4       1 #gb03_1300018\n## 9   830305 8303050000       0   小川谷       3       1 #gb03_1300005\n## 10  830305 8303050000       0 スクレ谷       3       1 #gb03_1300011\n##          W05_008       W05_009       W05_010                       geometry\n## 1  #gb03_1300079 #gb03_1300005 #gb03_1300006 LINESTRING (139.0178 35.889...\n## 2  #gb03_1300079 #gb03_1300006 #gb03_1300007 LINESTRING (139.018 35.8895...\n## 3  #gb03_1300007 #gb03_1300004 #gb03_1300007 LINESTRING (139.0123 35.890...\n## 4  #gb03_1300079 #gb03_1300007 #gb03_1300008 LINESTRING (139.018 35.8891...\n## 5  #gb03_1300079 #gb03_1300008 #gb03_1300009 LINESTRING (139.0221 35.881...\n## 6  #gb03_1300008 #gb03_1300013 #gb03_1300008 LINESTRING (139.0142 35.880...\n## 7  #gb03_1300017 #gb03_1300014 #gb03_1300017 LINESTRING (139.0438 35.879...\n## 8  #gb03_1300017 #gb03_1300018 #gb03_1300017 LINESTRING (139.0424 35.876...\n## 9  #gb03_1300079 #gb03_1300009 #gb03_1300020 LINESTRING (139.0222 35.881...\n## 10 #gb03_1300021 #gb03_1300011 #gb03_1300021 LINESTRING (139.0361 35.880...\n\n# W05_004には河川名称が入っているので、これが神田川の行だけ選ぶ\n# 距離の計算に使いやすいように、st_transform()でCRSをUTM(54)に変換\nkandagawa &lt;- stream |&gt;\n  filter(W05_004 == \"神田川\") |&gt;\n  st_set_crs(4326) |&gt;\n  st_union() |&gt;\n  st_transform(6691)\n\nkandagawa\n## Geometry set for 1 feature \n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: 371328.3 ymin: 3948213 xmax: 390425.7 ymax: 3953163\n## Projected CRS: JGD2011 / UTM zone 54N\n\n# 1mあたり0.01個の密度（=100 m間隔）で神田川に沿って点をサンプリング\nkandagawa_points &lt;- st_line_sample(kandagawa, density = 0.01) |&gt;\n  st_cast(\"POINT\") |&gt;\n  st_as_sf() |&gt;\n  arrange(desc(row_number())) |&gt; # 順序を反転させ\n  mutate(distance = (row_number() * 100)) # 河口からの距離を計算\n\n# 欲しい市区の名前をDEMの各セルに紐付け\ncity_names &lt;- c(\"武蔵野市\", \"杉並区\", \"中野区\", \"新宿区\", \n                \"文京区\", \"千代田区\", \"台東区\", \"墨田区\")\ncities_raster &lt;- jpn_cities(jis_code = 13, admin_name = city_names) |&gt;\n  rasterize(dem, field = \"city\")\n\n# 重ねてみる\nggplot() +\n  geom_spatraster(data = dem) +\n  geom_sf(data = kandagawa_points, aes(colour = distance)) +\n  scale_color_viridis_c() + # 河口からの距離はカラーマップを変える\n  labs(colour = \"河口からの距離 (m)\", fill = \"標高\")\n\n\n\n\n\n\n\n\n# 神田川沿いにサンプリングした100m間隔の点の標高を取得\nelevation &lt;- terra::extract(dem, kandagawa_points, bind = TRUE, exact = TRUE) |&gt;\n  st_as_sf()\n## Warning: [extract] transforming vector data to the CRS of the raster\n# 同様に、点の市区名を取得。\ncities &lt;- terra::extract(cities_raster, kandagawa_points, bind = TRUE) |&gt;\n  st_as_sf()\n## Warning: [extract] transforming vector data to the CRS of the raster\n\n# 河口からの距離と標高をプロットしてみる。\nelevation |&gt; \n  mutate(city = cities$city) |&gt;\n  ggplot(aes(x = distance, y = dem_tokyo, colour = city)) +\n  geom_point() +\n  scale_x_reverse() + # X軸は降順にする\n  labs(x = \"河口からの距離 (m)\", y = \"標高\", colour = \"市区\")\n\n\n\n\n\n\n\n\nあれ、川は坂を登ることはないはずですが、文京区と新宿区のあたりで妙な挙動を示していますね。神田川を地図にプロットして何が起きてるかみてみましょう。 以下を書き加えます。\n\n# 4_stream.R（続き）\n\nlibrary(leaflet)\nelevation |&gt;\n  mutate(city = cities$city) |&gt;\n  st_transform(4326) |&gt; # Leafletで表示するために緯度経度に直す\n  filter(city %in% c(\"新宿区\", \"文京区\")) |&gt; # 新宿区or文京区で\n  filter(dem_tokyo &gt; 2.5 & dem_tokyo &lt; 5) |&gt;  # 標高が2.5 ~ 5 m\n  filter(distance &lt; 6000) |&gt;                  # 河口からの距離が6km以内の場所に絞る\n  leaflet() |&gt;\n  addTiles() |&gt;  # Add default OpenStreetMap map tiles\n  addMarkers()\n\n\n\n\n\n首都高でした！ここですね。\n\n\n\n首都高5号池袋線の下を流れる神田川。Wikipedia「神田川」より",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>RStudioを用いた地理情報解析の基礎</span>"
    ]
  },
  {
    "objectID": "4.html#sec-kotsu",
    "href": "4.html#sec-kotsu",
    "title": "4  RStudioを用いた地理情報解析の基礎",
    "section": "4.3 余談：プログラミングに入門するときのコツ",
    "text": "4.3 余談：プログラミングに入門するときのコツ\nいきなり意味のわからないプログラムが出てきてやる気なくしますよね（普通そうだと思います）。しかし、ちょっとした解析やデータの整理、グラフ作成を行う能力はきっと将来役に立つはずです。Rはそのためのツールとしてとても優れています。とはいえ、「コピペだけしても何もわかった気にならない」みたいな気持ちを持ったまま授業に臨むのは辛いので、ここでは僕がプログラミングに入門する際に重要だと思っていることを書きます。\n\n雑にやる\nプログラムの意味が分かってなくても、動けばいいです。 「なんか絵が出た！」という素朴な楽しさを大切にしましょう。\n考える前に調べる\nはじめのうちは考えても無駄です。とにかく、ちょっとでも躓いたらすぐさま調べるようにしましょう。調べる方法は3つあります。\n\nRのHelpを使う\n関数の使い方がわからない時は、まずこれをします。Consoleに?調べたい関数名（例：?sum）と入れると、関数の説明書が出てきます。\nググる\nRは日本語ユーザーも多いので、高確率で何か出てきます。ググる際には、「R 関数名 エラーの内容」「R パッケージ名　やりたいこと」などの形式で調べると良いでしょう。 　- チャッピー\n　 結局これが一番いい気がしてきました…ChatGPTに聞きましょう！コードを貼って、このエラーが出たけどなんで？とか、こういうことをしたいんだけどどうすればいい？と聞けばいつでも朗らかなチャッピーが優しく教えてくれます。\n\nエラーメッセージは「怒られ」ではない\nエラーが出たらちょっとびっくりしますよね。エラーが出ると怒られた気持ちになってプログラミングを挫折したという話も聞いたことがあります。しかし、エラーが出ないように気をつけてプログラムを書くのは、（R初学者にとっては）あまり良いとは思いません。エラーをたくさん読むことが、プログラムのルールを学ぶ近道だと思います。自信がなくてもとりあえず実行してみて、結果を見ながら改善する、というループをできるだけたくさん回しましょう。\nとにかく確認する\nなぜかプログラムが動かない、そんな時は悩まずにプログラムの途中で生成されている変数やデータフレームを確認する癖をつけましょう。例えばdfという名前のデータフレームをいじっているのならば、まずはConsoleペインにdfと打って中身を見てみます。パイプで処理をつなげているときは、どこで問題が起きているか区別するためにそれぞれの段階の結果を出力してみると良いでしょう。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>RStudioを用いた地理情報解析の基礎</span>"
    ]
  },
  {
    "objectID": "4.html#より深く知りたい方へ",
    "href": "4.html#より深く知りたい方へ",
    "title": "4  RStudioを用いた地理情報解析の基礎",
    "section": "4.4 より深く知りたい方へ",
    "text": "4.4 より深く知りたい方へ\n\nR for Data Science\nGeocomputation with R",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>RStudioを用いた地理情報解析の基礎</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "参考文献",
    "section": "",
    "text": "Amagai, Yukihiro, Hiroyuki Oguma, and Fumiko Ishihama. 2022.\n“Predicted Scarcity of Suitable Habitat for Alpine Plant\nCommunities in Northern Japan Under Climate Change.” Applied\nVegetation Science, October, e12694. https://doi.org/10.1111/AVSC.12694.\n\n\nHock, R, G Rasul, C Adler, B Ca;ceres, S Gruber, Y Hirabayashi, M\nJackson, et al. 2019. “High Mountain Areas.” In IPCC\nSpecial Report on the Ocean and Cryosphere in a Changing Climate :,\n131–202. Uppsala University, Limnology; Cambridge University Press. https://doi.org/10.1017/9781009157964.004.\n\n\nKudo, Gaku, Yukihiro Amagai, Buho Hoshino, and Masami Kaneko. 2011.\n“Invasion of Dwarf Bamboo into Alpine Snow-Meadows in Northern\nJapan: Pattern of Expansion and Impact on Species Diversity.”\nEcology and Evolution 1 (September): 85–96. https://doi.org/10.1002/ECE3.9.\n\n\nKudo, Gaku, Yuka Kawai, Yukihiro Amagai, and Daniel E. Winkler. 2017.\n“Degradation and Recovery of an Alpine Plant Community:\nExperimental Removal of an Encroaching Dwarf Bamboo.” Alpine\nBotany 127 (April): 75–83. https://doi.org/10.1007/S00035-016-0178-2.\n\n\nMameno, Kota, Takahiro Kubo, Hiroyuki Oguma, Yukihiro Amagai, and\nYasushi Shoji. 2022. “Decline in the Alpine Landscape Aesthetic\nValue in a National Park Under Climate Change.” Climatic\nChange 170 (February): 1–18. https://doi.org/10.1007/S10584-022-03322-1.\n\n\nPease, Brent S, and Neil A Gilbert. 2025. “Light Pollution\nProlongs Avian Activity.” Science 389 (August): 818–21.\nhttps://doi.org/10.1126/science.adv9472.\n\n\n角谷. 2022. “生物多様性保全ツールとしてのoecm\nの可能性と課題.” 環境情報科学 51: 50–55. https://doi.org/10.11492/eis.51.4_50.",
    "crumbs": [
      "参考文献"
    ]
  }
]